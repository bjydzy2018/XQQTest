/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_iflytek_nativetool_AiuiToolMainEntry */

#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

#include <android/log.h>

#define LOG_TAG "AiuiToolMainFunc"
#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG,__VA_ARGS__)
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)

extern int AiuiToolMainFunc(int argc, char * argv[]);

pthread_t g_hAiuiToolWorkingThread=0;
JavaVM* gs_jvm;
jobject g_Listener;

char argv_0[1024] = {"AiuiToolMainFunc.exe"};
char* argv[1]= {argv_0};

#ifdef __cplusplus
extern "C" {
#endif

static void* threadWorking(void* arg) {
	LOGD("threadWorking in =>\n");

	JNIEnv *Proc_Msg_Env=NULL;
	jint ret = gs_jvm->AttachCurrentThread(&Proc_Msg_Env, NULL);

	int chdir_ret = chdir("/data/AIUI/armeabi-v7a/");
	LOGD("chdir(\"/data/AIUI/armeabi-v7a/\") ret %d.\n", chdir_ret);

	AiuiToolMainFunc(1, argv);

	jclass g_Listener_class = Proc_Msg_Env->GetObjectClass(g_Listener);
	jmethodID method = Proc_Msg_Env->GetStaticMethodID(g_Listener_class, "onFinished", "()V");
	Proc_Msg_Env->CallVoidMethod(g_Listener_class,method);

	LOGD("threadWorking out <=\n");
	ret = gs_jvm->DetachCurrentThread();
    return NULL;
}
/*
/*
 * Class:     com_iflytek_nativetool_AiuiToolMainEntry
 * Method:    startMainFunc
 * Signature: (Lcom/iflytek/nativetool/AiuiToolCallback;)V
 */
JNIEXPORT void JNICALL Java_com_iflytek_nativetool_AiuiToolMainEntry_startMainFunc (JNIEnv *env, jclass jc, jobject listener){
	LOGD("Java_com_iflytek_nativetool_AiuiToolMainEntry_startMainFunc in =>\n");

	if (gs_jvm == NULL) {
		env->GetJavaVM(&gs_jvm);
	}
	g_Listener = (jobject)env->NewGlobalRef(listener);

	int err = pthread_create(&g_hAiuiToolWorkingThread, NULL, threadWorking, NULL);
	
	LOGD("Java_com_iflytek_nativetool_AiuiToolMainEntry_startMainFunc out <=\n");
	return;
}

#ifdef __cplusplus
}
#endif
