/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_iflytek_nativetool_AiuiToolMainEntry */

#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

#include <android/log.h>

#ifdef ISS_SR_3
#include "iss_sr_3.h"
#else
#include "iss_sr.h"
#endif

#define LOG_TAG "AiuiToolMainFunc"
#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG,__VA_ARGS__)
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)

extern int AiuiToolMainFunc(int argc, char * argv[]);

JavaVM* gs_jvm;
static jclass g_AiuiToolMainEntry_class;

// begin of SR
jclass g_libisssr_class;
jmethodID g_method_libisssr_setMachineCode;
jmethodID g_method_libisssr_setSerialNumber;
jmethodID g_method_libisssr_getActiveKey;
jmethodID g_method_libisssr_activate;
jmethodID g_method_libisssr_create;
jmethodID g_method_libisssr_start;
jmethodID g_method_libisssr_uploadDict;
jmethodID g_method_libisssr_uploadData;
jmethodID g_method_libisssr_querySyncStatusResult;
jmethodID g_method_libisssr_setParam;
jmethodID g_method_libisssr_appendAudioData;
jmethodID g_method_libisssr_endAudioData;
jmethodID g_method_libisssr_stop;
jmethodID g_method_libisssr_destroy;

jobject g_joSRMsgListener;

Proc_OnMsgProc g_pfnOnSRMsgProc=NULL;
void* g_pSRUsrArg=NULL;
// end of SR

// begin of Common
jclass g_NativeHandle_class;
jmethodID g_method_NativeHandle_Constructor_init;
jmethodID g_method_NativeHandle_getErr_ret;
// end of Common

// begin of TTS
jclass g_libisstts_class;
jmethodID g_method_libisstts_initRes;
jmethodID g_method_libisstts_unInitRes;
jmethodID g_method_libisstts_create;
jmethodID g_method_libisstts_destroy;
jmethodID g_method_libisstts_setParam;
jmethodID g_method_libisstts_setParamEx;
jmethodID g_method_libisstts_start;
jmethodID g_method_libisstts_getAudioData;
jmethodID g_method_libisstts_stop;

jclass g_AiuiToolMainEntry_onTtsListener_class;
jmethodID g_method_AiuiToolMainEntry_onTtsListener_Constructor_init;
jmethodID g_method_AiuiToolMainEntry_onTtsListener_setNative_point;
// end of TTS

// begin of MVW
jclass g_libissmvw_class;
jmethodID g_method_libissmvw_create;
jmethodID g_method_libissmvw_createEx;
jmethodID g_method_libissmvw_destroy;
jmethodID g_method_libissmvw_setThreshold;
jmethodID g_method_libissmvw_setParam;
jmethodID g_method_libissmvw_start;
jmethodID g_method_libissmvw_addstartscene;
jmethodID g_method_libissmvw_appendAudioData;
jmethodID g_method_libissmvw_stop;
jmethodID g_method_libissmvw_stopscene;
jmethodID g_method_libissmvw_setMvwKeyWords;
jmethodID g_method_libissmvw_setMvwDefaultKeyWords;
jmethodID g_method_libissmvw_setMvwLanguage;
jmethodID g_method_libissmvw_isCouldAppendAudioData;

jclass g_AiuiToolMainEntry_onIMVWListener_class;
jmethodID g_method_AiuiToolMainEntry_onIMVWListener_Constructor_init;
jmethodID g_method_AiuiToolMainEntry_onIMVWListener_setNative_point;
// end of MVW

// begin of CATA
jclass g_libisscata_class;
jmethodID g_method_libisscata_IndexCreate;
jmethodID g_method_libisscata_IndexCreateEx;
jmethodID g_method_libisscata_IndexDestroy;
jmethodID g_method_libisscata_IndexDropRes;
jmethodID g_method_libisscata_IndexAddIdxEntity;
jmethodID g_method_libisscata_IndexDelIdxEntity;
jmethodID g_method_libisscata_IndexEndIdxEntity;
jmethodID g_method_libisscata_SearchCreate;
jmethodID g_method_libisscata_SearchCreateEx;
jmethodID g_method_libisscata_SearchDestroy;
jmethodID g_method_libisscata_SearchSync;
jmethodID g_method_libisscata_SearchAsync;
jmethodID g_method_libisscata_SetParam;

jclass g_CataNativeHandle_class;
jmethodID g_method_CataNativeHandle_Constructor_init;
jmethodID g_method_CataNativeHandle_getErr_ret;

jclass g_AiuiToolMainEntry_onICataListener_class;
jmethodID g_method_AiuiToolMainEntry_onICataListener_Constructor_init;
jmethodID g_method_AiuiToolMainEntry_onICataListener_setNative_point;
// end of CATA

// begin of Seopt
jclass g_libissseopt_class;
jmethodID g_method_libissseopt_create;
jmethodID g_method_libissseopt_destroy;
jmethodID g_method_libissseopt_process;
jmethodID g_method_libissseopt_setParam;
jmethodID g_method_libissseopt_getGSCPower;
// end of Seopt


#ifdef __cplusplus
extern "C" {
#endif

static char g_argv_0[1024] = { "AiuiToolMainFunc.exe" };
static char* g_argv[1] = { g_argv_0 };
static void* threadWorking(void* arg) {
	LOGD("threadWorking in11 =>\n");

	{
		int chdir_ret = chdir("/data/AIUI/armeabi-v7a/");
		LOGD("chdir(\"/data/AIUI/armeabi-v7a/\") ret %d.\n", chdir_ret);
		AiuiToolMainFunc(1, g_argv);
	}

	{
		JNIEnv *env = NULL;
		jint ret = gs_jvm->AttachCurrentThread(&env, NULL);

		// 调用Java类提供的静态方法
		jmethodID method = env->GetStaticMethodID(g_AiuiToolMainEntry_class, "onFinished", "()V");
		env->CallStaticVoidMethod(g_AiuiToolMainEntry_class, method);

		ret = gs_jvm->DetachCurrentThread();
	}

	LOGD("threadWorking out <=\n");
    return NULL;
}

/*
* Class:     com_iflytek_nativetool_AiuiToolMainEntry
* Method:    startNativeMainFunc
* Signature: (Lcom/iflytek/nativetool/AiuiToolMainEntry/onSRMsgListener;)V
*/
JNIEXPORT void JNICALL Java_com_iflytek_nativetool_AiuiToolMainEntry_startNativeMainFunc(JNIEnv *env, jclass jc){
	LOGD("Java_com_iflytek_nativetool_AiuiToolMainEntry_startMainFunc in =>\n");

	env->GetJavaVM(&gs_jvm);
	g_AiuiToolMainEntry_class = (jclass)env->NewGlobalRef(env->FindClass("com/iflytek/nativetool/AiuiToolMainEntry"));

	// begin of SR
	g_libisssr_class = (jclass)env->NewGlobalRef(env->FindClass("com/iflytek/speech/libisssr"));
	g_method_libisssr_setMachineCode = env->GetStaticMethodID(
		g_libisssr_class, "setMachineCode", "(Ljava/lang/String;)I");
	g_method_libisssr_setSerialNumber = env->GetStaticMethodID(
		g_libisssr_class, "setSerialNumber", "(Ljava/lang/String;)I");
	g_method_libisssr_getActiveKey = env->GetStaticMethodID(
		g_libisssr_class, "getActiveKey", "(Ljava/lang/String;)I");
	g_method_libisssr_activate = env->GetStaticMethodID(
		g_libisssr_class, "activate", "(Ljava/lang/String;)I");
	g_method_libisssr_create = env->GetStaticMethodID(
		g_libisssr_class, "create", "(ILjava/lang/String;Lcom/iflytek/speech/sr/ISRListener;)I");
	g_method_libisssr_start = env->GetStaticMethodID(
		g_libisssr_class, "start", "(Ljava/lang/String;ILjava/lang/String;)I");
	g_method_libisssr_uploadDict = env->GetStaticMethodID(
		g_libisssr_class, "uploadDict", "(Ljava/lang/String;I)I");
	g_method_libisssr_uploadData = env->GetStaticMethodID(
		g_libisssr_class, "uploadData", "(Ljava/lang/String;I)I");
	g_method_libisssr_querySyncStatusResult = env->GetStaticMethodID(
		g_libisssr_class, "querySyncStatusResult", "(Ljava/lang/String;)I");
	g_method_libisssr_setParam = env->GetStaticMethodID(
		g_libisssr_class, "setParam", "(Ljava/lang/String;Ljava/lang/String;)I");
	g_method_libisssr_appendAudioData = env->GetStaticMethodID(
		g_libisssr_class, "appendAudioData", "([BI)I");
	g_method_libisssr_endAudioData = env->GetStaticMethodID(
		g_libisssr_class, "endAudioData", "()I");
	g_method_libisssr_stop = env->GetStaticMethodID(
		g_libisssr_class, "stop", "()I");
	g_method_libisssr_destroy = env->GetStaticMethodID(
		g_libisssr_class, "destroy", "()I");

	jclass onSRMsgListener_class = env->FindClass("com/iflytek/nativetool/onSRMsgListener");
	jmethodID method_onSRMsgListener_Constructor_init = env->GetMethodID(onSRMsgListener_class, "<init>", "()V");
	g_joSRMsgListener = (jobject)env->NewGlobalRef(env->NewObject(onSRMsgListener_class, method_onSRMsgListener_Constructor_init));
	// end of SR

	// begin of Common
	g_NativeHandle_class = (jclass)env->NewGlobalRef(env->FindClass("com/iflytek/speech/NativeHandle"));
	g_method_NativeHandle_Constructor_init = env->GetMethodID(g_NativeHandle_class, "<init>", "()V");
	g_method_NativeHandle_getErr_ret = env->GetMethodID(g_NativeHandle_class, "getErr_ret", "()I");
	// end of Common

	// begin of TTS
	g_libisstts_class = (jclass)env->NewGlobalRef(env->FindClass("com/iflytek/speech/libisstts"));
	g_method_libisstts_initRes = env->GetStaticMethodID(
		g_libisstts_class, "initRes", "(Ljava/lang/String;I)I");
	g_method_libisstts_unInitRes = env->GetStaticMethodID(
		g_libisstts_class, "unInitRes", "()I");
	g_method_libisstts_create = env->GetStaticMethodID(
		g_libisstts_class, "create", "(Lcom/iflytek/speech/NativeHandle;Lcom/iflytek/speech/ITtsListener;)V");
	g_method_libisstts_destroy = env->GetStaticMethodID(
		g_libisstts_class, "destroy", "(Lcom/iflytek/speech/NativeHandle;)V");
	g_method_libisstts_setParam = env->GetStaticMethodID(
		g_libisstts_class, "setParam", "(Lcom/iflytek/speech/NativeHandle;II)V");
	g_method_libisstts_setParamEx = env->GetStaticMethodID(
		g_libisstts_class, "setParamEx", "(Lcom/iflytek/speech/NativeHandle;ILjava/lang/String;)V");
	g_method_libisstts_start = env->GetStaticMethodID(
		g_libisstts_class, "start", "(Lcom/iflytek/speech/NativeHandle;Ljava/lang/String;)V");
	g_method_libisstts_getAudioData = env->GetStaticMethodID(
		g_libisstts_class, "getAudioData", "(Lcom/iflytek/speech/NativeHandle;[BI[I)V");
	g_method_libisstts_stop = env->GetStaticMethodID(
		g_libisstts_class, "stop", "(Lcom/iflytek/speech/NativeHandle;)V");

	g_AiuiToolMainEntry_onTtsListener_class = (jclass)env->NewGlobalRef(env->FindClass("com/iflytek/nativetool/onTtsListener"));
	g_method_AiuiToolMainEntry_onTtsListener_Constructor_init = env->GetMethodID(g_AiuiToolMainEntry_onTtsListener_class, "<init>", "()V");
	g_method_AiuiToolMainEntry_onTtsListener_setNative_point = env->GetMethodID(g_AiuiToolMainEntry_onTtsListener_class, "setNative_point", "(J)V");
	// end of TTS

	// begin of MVW
	g_libissmvw_class = (jclass)env->NewGlobalRef(env->FindClass("com/iflytek/speech/libissmvw"));
	g_method_libissmvw_create = env->GetStaticMethodID(g_libissmvw_class,
		"create", "(Lcom/iflytek/speech/NativeHandle;Ljava/lang/String;Lcom/iflytek/speech/mvw/IMVWListener;)I");
	g_method_libissmvw_createEx = env->GetStaticMethodID(g_libissmvw_class,
		"createEx", "(Lcom/iflytek/speech/NativeHandle;Ljava/lang/String;Lcom/iflytek/speech/mvw/IMVWListener;)I");
	g_method_libissmvw_destroy = env->GetStaticMethodID(g_libissmvw_class,
		"destroy", "(Lcom/iflytek/speech/NativeHandle;)I");
	g_method_libissmvw_setThreshold = env->GetStaticMethodID(g_libissmvw_class,
		"setThreshold", "(Lcom/iflytek/speech/NativeHandle;III)I");
	g_method_libissmvw_setParam = env->GetStaticMethodID(g_libissmvw_class,
		"setParam", "(Lcom/iflytek/speech/NativeHandle;Ljava/lang/String;Ljava/lang/String;)I");
	g_method_libissmvw_start = env->GetStaticMethodID(g_libissmvw_class,
		"start", "(Lcom/iflytek/speech/NativeHandle;I)I");
	g_method_libissmvw_addstartscene = env->GetStaticMethodID(g_libissmvw_class,
		"addstartscene", "(Lcom/iflytek/speech/NativeHandle;I)I");
	g_method_libissmvw_appendAudioData = env->GetStaticMethodID(g_libissmvw_class,
		"appendAudioData", "(Lcom/iflytek/speech/NativeHandle;[BI)I");
	g_method_libissmvw_stop = env->GetStaticMethodID(g_libissmvw_class,
		"stop", "(Lcom/iflytek/speech/NativeHandle;)I");
	g_method_libissmvw_stopscene = env->GetStaticMethodID(g_libissmvw_class,
		"stopscene", "(Lcom/iflytek/speech/NativeHandle;I)I");
	g_method_libissmvw_setMvwKeyWords = env->GetStaticMethodID(g_libissmvw_class,
		"setMvwKeyWords", "(Lcom/iflytek/speech/NativeHandle;ILjava/lang/String;)I");
	g_method_libissmvw_setMvwDefaultKeyWords = env->GetStaticMethodID(g_libissmvw_class,
		"setMvwDefaultKeyWords", "(Lcom/iflytek/speech/NativeHandle;I)I");
	g_method_libissmvw_setMvwLanguage = env->GetStaticMethodID(g_libissmvw_class,
		"setMvwLanguage", "(I)I");
	g_method_libissmvw_isCouldAppendAudioData = env->GetStaticMethodID(g_libissmvw_class,
		"isCouldAppendAudioData", "()Z");

	g_AiuiToolMainEntry_onIMVWListener_class = (jclass)env->NewGlobalRef(env->FindClass("com/iflytek/nativetool/onIMVWListener"));
	g_method_AiuiToolMainEntry_onIMVWListener_Constructor_init = env->GetMethodID(g_AiuiToolMainEntry_onIMVWListener_class, "<init>", "()V");
	g_method_AiuiToolMainEntry_onIMVWListener_setNative_point = env->GetMethodID(g_AiuiToolMainEntry_onIMVWListener_class, "setNative_point", "(J)V");
	// end of MVW

	// begin of CATA
	g_libisscata_class = (jclass)env->NewGlobalRef(env->FindClass("com/iflytek/cata/libisscata"));
	g_method_libisscata_IndexCreate = env->GetStaticMethodID(g_libisscata_class,
		"IndexCreate", "(Lcom/iflytek/cata/CataNativeHandle;Ljava/lang/String;Ljava/lang/String;ILcom/iflytek/cata/ICataListener;)V");
	g_method_libisscata_IndexCreateEx = env->GetStaticMethodID(g_libisscata_class,
		"IndexCreateEx", "(Lcom/iflytek/cata/CataNativeHandle;Ljava/lang/String;Ljava/lang/String;IILcom/iflytek/cata/ICataListener;)V");
	g_method_libisscata_IndexDestroy = env->GetStaticMethodID(g_libisscata_class,
		"IndexDestroy", "(Lcom/iflytek/cata/CataNativeHandle;)V");
	g_method_libisscata_IndexDropRes = env->GetStaticMethodID(g_libisscata_class,
		"IndexDropRes", "(Lcom/iflytek/cata/CataNativeHandle;)V");
	g_method_libisscata_IndexAddIdxEntity = env->GetStaticMethodID(g_libisscata_class,
		"IndexAddIdxEntity", "(Lcom/iflytek/cata/CataNativeHandle;Ljava/lang/String;)V");
	g_method_libisscata_IndexDelIdxEntity = env->GetStaticMethodID(g_libisscata_class,
		"IndexDelIdxEntity", "(Lcom/iflytek/cata/CataNativeHandle;Ljava/lang/String;)V");
	g_method_libisscata_IndexEndIdxEntity = env->GetStaticMethodID(g_libisscata_class,
		"IndexEndIdxEntity", "(Lcom/iflytek/cata/CataNativeHandle;)V");
	g_method_libisscata_SearchCreate = env->GetStaticMethodID(g_libisscata_class,
		"SearchCreate", "(Lcom/iflytek/cata/CataNativeHandle;Ljava/lang/String;Ljava/lang/String;Lcom/iflytek/cata/ICataListener;)V");
	g_method_libisscata_SearchCreateEx = env->GetStaticMethodID(g_libisscata_class,
		"SearchCreateEx", "(Lcom/iflytek/cata/CataNativeHandle;Ljava/lang/String;Ljava/lang/String;ILcom/iflytek/cata/ICataListener;)V");
	g_method_libisscata_SearchDestroy = env->GetStaticMethodID(g_libisscata_class,
		"SearchDestroy", "(Lcom/iflytek/cata/CataNativeHandle;)V");
	g_method_libisscata_SearchSync = env->GetStaticMethodID(g_libisscata_class,
		"SearchSync", "(Lcom/iflytek/cata/CataNativeHandle;Ljava/lang/String;)Ljava/lang/String;");
	g_method_libisscata_SearchAsync = env->GetStaticMethodID(g_libisscata_class,
		"SearchAsync", "(Lcom/iflytek/cata/CataNativeHandle;Ljava/lang/String;)V");
	g_method_libisscata_SetParam = env->GetStaticMethodID(g_libisscata_class,
		"SetParam", "(Lcom/iflytek/cata/CataNativeHandle;II)V");

	g_CataNativeHandle_class = (jclass)env->NewGlobalRef(env->FindClass("com/iflytek/cata/CataNativeHandle"));
	g_method_CataNativeHandle_Constructor_init = env->GetMethodID(g_CataNativeHandle_class, "<init>", "()V");
	g_method_CataNativeHandle_getErr_ret = env->GetMethodID(g_CataNativeHandle_class, "getErr_ret", "()I");

	g_AiuiToolMainEntry_onICataListener_class = (jclass)env->NewGlobalRef(env->FindClass("com/iflytek/nativetool/onICataListener"));
	g_method_AiuiToolMainEntry_onICataListener_Constructor_init = env->GetMethodID(g_AiuiToolMainEntry_onICataListener_class, "<init>", "()V");
	g_method_AiuiToolMainEntry_onICataListener_setNative_point = env->GetMethodID(g_AiuiToolMainEntry_onICataListener_class, "setNative_point", "(J)V");
	// end of CATA

	// begin of Seopt
	g_libissseopt_class = (jclass)env->NewGlobalRef(env->FindClass("com/iflytek/speech/libissseopt"));
	g_method_libissseopt_create = env->GetStaticMethodID(g_libissseopt_class,
		"create", "(Lcom/iflytek/speech/NativeHandle;Ljava/lang/String;)I");
	g_method_libissseopt_destroy = env->GetStaticMethodID(g_libissseopt_class,
		"destroy", "(Lcom/iflytek/speech/NativeHandle;)I");
	g_method_libissseopt_process = env->GetStaticMethodID(g_libissseopt_class,
		"process", "(Lcom/iflytek/speech/NativeHandle;[BI[B[I)I");
	g_method_libissseopt_setParam = env->GetStaticMethodID(g_libissseopt_class,
		"setParam", "(Lcom/iflytek/speech/NativeHandle;Ljava/lang/String;Ljava/lang/String;)I");
	g_method_libissseopt_getGSCPower = env->GetStaticMethodID(g_libissseopt_class,
		"getGSCPower", "(Lcom/iflytek/speech/NativeHandle;I[F)I");
	// end of Seopt

	pthread_t hAiuiToolWorkingThread=0;
	pthread_create(&hAiuiToolWorkingThread, NULL, threadWorking, NULL);

	LOGD("Java_com_iflytek_nativetool_AiuiToolMainEntry_startMainFunc out <=\n");

	return;
}

/*
* Class:     com_iflytek_nativetool_AiuiToolMainEntry
* Method:    onSRNativeMsgProc
* Signature: (JJLjava/lang/String;)V
*/
JNIEXPORT void JNICALL Java_com_iflytek_nativetool_AiuiToolMainEntry_onSRNativeMsgProc(
	JNIEnv *env, jclass jc, jlong jMsg, jlong jwParm, jstring jlParm) {
	if (g_pfnOnSRMsgProc) {
		const char* lParm = NULL;
		if (jlParm) {
			lParm = (const char*)env->GetStringUTFChars(jlParm, NULL);
		}
		g_pfnOnSRMsgProc(g_pSRUsrArg, (unsigned int)jMsg, (unsigned int)jwParm, lParm);
		if (jlParm) {
			env->ReleaseStringUTFChars(jlParm, lParm);
		}
	}
}

#ifdef __cplusplus
}
#endif
